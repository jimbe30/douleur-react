 _
   (_)
	_   _   _
   | | | | | | 
  _| | | |_| | 
 |___/  \___/  
 
 
CDN pour librairies javascript : https://unpkg.com 

Couleurs 
	turquoise
		#058090
		#237e91
		#019baf
		#00626f
		#00c3d9
		#2CA5C2
		linear-gradient(165deg, #468a9a 50%, #77bfcc 75%)
	gris 
		#f8f9fe
		#f7fafc
		#f7f9fa
		#b1b3b7
		#5c6063
		#dde6ec
		#fbfbfb
	bleu
		#003750
		#004070
		#135482
		#163c7d
		#172b4d
		#196faa
		#2185d0
		#4062a0		
		#d7f3ff
		#a9d5de
		#f8ffff
		
		

Polices
	line-height: 1.5
	Open Sans
	Barlow
	
----------

Préserver un texte
	css -> white-space: pre-wrap;
	html -> <pre>
	
Tronquer un texte avec des ... 
	(mot clé : collapse pour étendre)
	css -> overflow: hidden; text-overflow: ellipsis;
	
Dégradé de texte
	css ->	background-clip: text; 
			-webkit-background-clip: text;
			color: transparent; 
			background: linear-gradient(#30CFD0 0%, #330867 100%);
			
Couleur image svg 
	lien pour convertir couleur hexa en filtre css -> https://codepen.io/sosuke/pen/Pjoqqp
	css ->	content: url("./assets/pain-ico.svg");
			filter: invert(24%) sepia(56%) saturate(6686%) hue-rotate(346deg) brightness(87%) contrast(123%);
			


/**************                             REACT                            **************/


* create-react-app : 
	
	npm uninstall -g create-react-app
	npx create-react-app $my-app
	cd my-app
	npm start
	
* Contexte : 
	- pourquoi	=> passer implicitement des props globales à travers l'arborescence de composants
	- exemple	=> react-router passe la prop 'history' à tous les composants enfants
	- usage		=> 
		const Context = React.createContext(// valeur par défaut)
		<Context.Provider value={this.state.xxx}>
          <NestedComponents ... />
        </Context.Provider>
		class NestedComponent {
			static contextType = Context
			this.valeurContexte = this.context 
		}
* HOC : 
	- pourquoi	=> ajouter un comportement global à un ensemble de composants sans modifier leur manière de faire le rendu
	- exemple	=> fonction connect() de react-redux qui branche un composant sur le store 
				   et raffraichit le rendu avec les nouvelles props quand le state change

* refs : 
	- pourquoi	=> accéder aux nœuds du DOM ou éléments React créés dans la méthode de rendu
	- exemple	=> gérer le focus, la sélection du texte, ou s’interfacer avec des bibliothèques DOM tierces (jQuery).		   
	- usage		=> dans une classe
		let textInput = React.createRef();
		textInput.current.focus();
		<input type="text" ref={this.textInput} />


/**************                      Variables d'environnement                     **************/

Ex : pour l'environnement 'integration'
	- Dans fichier .env.integration -> Référencer les variables sous la forme REACT_APP_xxx
	- Dans package.json ->
			"scripts": {
					...
					"build:integration": "env-cmd -f .env.integration npm run build"
				},
	- Au moment du build -> npm run build:integration
	- Dans les programmes -> accès à la variable process.env.REACT_APP_xxx 
	
	
